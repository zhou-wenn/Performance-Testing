<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="城管" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\software\apache-jmeter-5.2.1\lib\gson-2.8.6.jar</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="全局变量 - 使用前请修改" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userName" elementType="Argument">
            <stringProp name="Argument.name">userName</stringProp>
            <stringProp name="Argument.value">superAdmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPwd" elementType="Argument">
            <stringProp name="Argument.name">userPwd</stringProp>
            <stringProp name="Argument.value">rdX4kUoYWmg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cameraExcelPath" elementType="Argument">
            <stringProp name="Argument.name">cameraExcelPath</stringProp>
            <stringProp name="Argument.value">D:\work\test\测试工作\城管\万象2.0\相机批量导出信息ts1.xls</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userName1" elementType="Argument">
            <stringProp name="Argument.name">userName1</stringProp>
            <stringProp name="Argument.value">zhouwen</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userPwd1" elementType="Argument">
            <stringProp name="Argument.name">userPwd1</stringProp>
            <stringProp name="Argument.value">1234567a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cameraExcelPath6" elementType="Argument">
            <stringProp name="Argument.name">cameraExcelPath6</stringProp>
            <stringProp name="Argument.value">D:\work\test\测试工作\城管\万象2.0\相机批量导出信息.xls</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cameraExcelPath400" elementType="Argument">
            <stringProp name="Argument.name">cameraExcelPath400</stringProp>
            <stringProp name="Argument.value">D:\work\test\测试工作\城管\万象2.0\相机批量导出信息-集群.xls</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cameraExcelPath200" elementType="Argument">
            <stringProp name="Argument.name">cameraExcelPath200</stringProp>
            <stringProp name="Argument.value">D:\work\test\测试工作\城管\万象2.0\相机批量导出信息-集群60.xls</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ipaddr" elementType="Argument">
            <stringProp name="Argument.name">ipaddr</stringProp>
            <stringProp name="Argument.value">10.171.130.105</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="获取用户账号密码" enabled="true">
        <stringProp name="filename">D:/文档/项目文档/3.北京大数据平台AI能力建设项目/性能测试/testdata/user.csv</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames"></stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <stringProp name="delimiter"></stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="循环获取types检索条件" enabled="true">
        <stringProp name="filename">D:/文档/项目文档/3.北京大数据平台AI能力建设项目/性能测试/testdata/随机条件.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">types</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="添加角色-城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="useraddloop" elementType="Argument">
              <stringProp name="Argument.name">useraddloop</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.desc">批量添加用户个数</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rangeid" elementType="Argument">
              <stringProp name="Argument.name">rangeid</stringProp>
              <stringProp name="Argument.value">${__Random(1,10000,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 添加角色" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${useraddloop}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${useraddloop}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">countid</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加角色-${countid}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;roleName&quot;: &quot;新建角色${countid}&quot;,&#xd;
    &quot;remark&quot;: &quot;&quot;,&#xd;
    &quot;permissions&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-megcity-web-1584603868060&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 0,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-dashboard-1584602334731&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 1,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-event-1584602449252&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 2,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-alarm-audit-1584602497671&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 3,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-event-management-1587370115722&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 4,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-history-m-1600071648047&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 5,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-situation-1584602602059&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 5,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-resource-1584602741625&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 6,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-camera-1584603027159&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 7,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-parse-config-1584602905819&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 9,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-system-1584602959197&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 10,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-auth-1584603065366&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 11,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-personnel-1584603100515&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 12,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-department-1584603131863&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 14,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-role-1584603193024&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 16,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-common-config-1584603235744&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 18,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;megcity-web-system-log-1584603272138&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 19,&#xd;
            &quot;resourceType&quot;: &quot;CATEGORY&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-log-query-1584603318505&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 20,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;middle-web-log-statistics-1584603355160&quot;,&#xd;
            &quot;enabled&quot;: true,&#xd;
            &quot;order&quot;: 21,&#xd;
            &quot;resourceType&quot;: &quot;MODULE&quot;,&#xd;
            &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;userIds&quot;: [&#xd;
        &#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/roles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;result&quot;);

          Iterator iter = resultArray.iterator();
          List listdeviceIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listdeviceIddata.add(subJson.get(&quot;deviceId&quot;).getAsString());
          }
          vars.putObject(&quot;listdeviceIddata&quot;, listdeviceIddata);
          vars.putObject(&quot;listdeviceIddataSize&quot;, listdeviceIddata.size());
          if (listdeviceIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listdeviceIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listdeviceIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listdeviceIddata&quot;));
          
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="添加相机-城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="useraddloop" elementType="Argument">
              <stringProp name="Argument.name">useraddloop</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.desc">批量添加用户个数</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rangeid" elementType="Argument">
              <stringProp name="Argument.name">rangeid</stringProp>
              <stringProp name="Argument.value">${__Random(1,10000,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 获取设备id" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取部门id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/organizations/queryTree</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-188" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.231.107.20告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin@10.231.107.20:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;39.909869&quot;,&#xd;
    &quot;lon&quot;: &quot;116.398358&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin123&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 2,&#xd;
    &quot;period&quot;: 1800,&#xd;
    &quot;alarmClip&quot;: true,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-3磁盘" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.169.241.3告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin123@10.169.241.3:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;39.909869&quot;,&#xd;
    &quot;lon&quot;: &quot;116.398358&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin123&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 2,&#xd;
    &quot;period&quot;: 1800,&#xd;
    &quot;alarmClip&quot;: false,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-3内存" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.169.241.3-test${__Random(1,10000,)}内存&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin123@10.169.241.3:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;30.594980&quot;,&#xd;
    &quot;lon&quot;: &quot;114.305736&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 1,&#xd;
    &quot;period&quot;: 35,&#xd;
    &quot;alarmClip&quot;: false,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="解析配置-城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">通过部门名称获取部门id，总部为第一级部门，支持三级部门获取部门id</stringProp>
            </elementProp>
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 拉取相机+获取解析任务id" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取部门id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/organizations/queryTree</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机- 跨页全选方式" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&#xd;
        &quot;${orgId}&quot;&#xd;
    ],&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:batchSave</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="拉取相机 - 勾选方式" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="相机管理-相机列表" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&#xd;
        &quot;${orgId}&quot;&#xd;
    ],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 1000,&#xd;
    &quot;action&quot;: &quot;pull&quot;,&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcameraIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcameraIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listcameraIddata&quot;, listcameraIddata);
          vars.putObject(&quot;listcameraIddataSize&quot;, listcameraIddata.size());
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcameraIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcameraIddata&quot;));
          
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;ids&quot;: ${listcameraIddata},&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:batchSave</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析配置-获取任务id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: ${pageSize},&#xd;
    &quot;condition&quot;: {&#xd;
        &quot;departId&quot;: &quot;${orgId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/task/queryByPage</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listtaskIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listtaskIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listtaskIddata&quot;, listtaskIddata);
          vars.putObject(&quot;listtaskIddataSize&quot;, listtaskIddata.size());
          if (listtaskIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listtaskIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 解析任务配置" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${listloop}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${listloop}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">countid</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析任务配置-${countid}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: ${taskId},&#xd;
    &quot;rule&quot;: &quot;1&quot;,&#xd;
    &quot;rois&quot;: [&#xd;
        {&#xd;
            &quot;alarmTypes&quot;: [&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;04-01&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;04-05&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-36&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;04-06&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;04-10&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;04-09&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-07&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;02-03&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-01&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-98&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;03-11&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;02-01&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-12&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-10&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;01-11&quot;&#xd;
                },&#xd;
                {&#xd;
                    &quot;alarmType&quot;: &quot;06-06&quot;&#xd;
                }&#xd;
            ],&#xd;
            &quot;roi&quot;: [&#xd;
                [&#xd;
                    {&#xd;
                        &quot;x&quot;: 0.009,&#xd;
                        &quot;y&quot;: 0.007&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;x&quot;: 0.012,&#xd;
                        &quot;y&quot;: 0.993&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;x&quot;: 0.993,&#xd;
                        &quot;y&quot;: 0.998&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;x&quot;: 0.993,&#xd;
                        &quot;y&quot;: 0.004&#xd;
                    }&#xd;
                ]&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/task/update</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//log.info(&quot;countid:&quot; + vars.getObject(&quot;countid&quot;));
vars.putObject(&quot;taskId&quot;, vars.getObject(&quot;listtaskIddata&quot;).get(${countid}));
//log.info(&quot;taskId:&quot; + vars.getObject(&quot;taskId&quot;));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="人工标注-城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.desc">获取告警编号的个数</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="state" elementType="Argument">
              <stringProp name="Argument.name">state</stringProp>
              <stringProp name="Argument.value">&quot;已受理&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">生成人工标注报警的原始报警状态类别，如：不受理、已受理、待受理</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 获取告警编号" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取告警编号" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: ${stateNo},&#xd;
    &quot;startTime&quot;:1600185600000,&#xd;
    &quot;endTime&quot;: ${__time(,)},&#xd;
    &quot;pageSize&quot;: ${pageSize},&#xd;
    &quot;pageNo&quot;: 1&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/alarms/queryByPage</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String stateNo;
if (${state}.equals(&quot;不受理&quot;)){
	stateNo = &quot;-1&quot;;
}else if(${state}.equals(&quot;待受理&quot;)){
	stateNo = &quot;0&quot;;
}else if(${state}.equals(&quot;已受理&quot;)){
	stateNo = &quot;1&quot;;
}
vars.putObject(&quot;stateNo&quot;, stateNo);


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcaseNumberdata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcaseNumberdata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;listcaseNumberdata&quot;, listcaseNumberdata);
          vars.putObject(&quot;listcaseNumberdataSize&quot;, listcaseNumberdata.size());
          if (listcaseNumberdata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listcaseNumberdata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdata&quot;));    
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 解析任务" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${listloop}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${listloop}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">countid</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="人工标注-${countid}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;caseNumber&quot;: &quot;${caseNumber}&quot;,&#xd;
    &quot;acceptType&quot;: &quot;04-10&quot;,&#xd;
    &quot;description&quot;: &quot;脚本调用人工${countid}&quot;,&#xd;
    &quot;causeArea&quot;: [&#xd;
        {&#xd;
            &quot;x&quot;: 0.065,&#xd;
            &quot;y&quot;: 0.052&#xd;
        },&#xd;
        {&#xd;
            &quot;x&quot;: 0.192,&#xd;
            &quot;y&quot;: 0.052&#xd;
        },&#xd;
        {&#xd;
            &quot;x&quot;: 0.192,&#xd;
            &quot;y&quot;: 0.704&#xd;
        },&#xd;
        {&#xd;
            &quot;x&quot;: 0.065,&#xd;
            &quot;y&quot;: 0.704&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/alarms/artifact</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//log.info(&quot;countid:&quot; + vars.getObject(&quot;countid&quot;));
vars.putObject(&quot;caseNumber&quot;, vars.getObject(&quot;listcaseNumberdata&quot;).get(${countid}));
//log.info(&quot;caseNumber:&quot; + vars.getObject(&quot;caseNumber&quot;));
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="检索报警数据-城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 获取设备id" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="检索报警结果" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: 0,&#xd;
    &quot;startTime&quot;: 1602586800000,&#xd;
    &quot;endTime&quot;: 1602673200000,&#xd;
    &quot;pageSize&quot;: 20,&#xd;
    &quot;pageNo&quot;: 1&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/alarms/queryByPage</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="IoT录像相关 - 城管" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="useraddloop" elementType="Argument">
              <stringProp name="Argument.name">useraddloop</stringProp>
              <stringProp name="Argument.value">200</stringProp>
              <stringProp name="Argument.desc">批量添加用户个数</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="rangeid" elementType="Argument">
              <stringProp name="Argument.name">rangeid</stringProp>
              <stringProp name="Argument.value">${__Random(1,10000,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 获取设备id" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取cache" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;CommandType&quot; : &quot;&quot;,&#xd;
	&quot;DeviceID&quot;:&quot;110000200200000001&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.122.101.139</stringProp>
            <stringProp name="HTTPSampler.port">8549</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/iot/api/cache/dev/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2092831641">&quot;Result&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取磁盘录像文件" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.199.0.138</stringProp>
            <stringProp name="HTTPSampler.port">8519</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/iot/api/recorder/dev/status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2092831641">&quot;Result&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.231.21.188告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin@10.231.21.188:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;39.909869&quot;,&#xd;
    &quot;lon&quot;: &quot;116.398358&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin123&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 2,&#xd;
    &quot;period&quot;: 1800,&#xd;
    &quot;alarmClip&quot;: true,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取磁盘录像文件" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;DeviceID&quot;: &quot;110000200200000178&quot;,&#xd;
    &quot;BeginTime&quot;: &quot;1585719308000&quot;,&#xd;
    &quot;EndTime&quot;: &quot;1685719308000&quot;,&#xd;
    &quot;ServerType&quot;: 1,&#xd;
    &quot;ServerAddr&quot;: &quot;http://10.199.0.42:8080/v5/objectStorage/testBucket&quot;,&#xd;
    &quot;SyncFlag&quot;: 1,&#xd;
    &quot;CommandType&quot;: &quot;SaveRecordTo&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.122.101.74</stringProp>
            <stringProp name="HTTPSampler.port">8519</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/iot/api/recorder/dev/queryRecord</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2092831641">&quot;Result&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取视频流分辨率" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;deviceId&quot;:&quot;110000200200000178&quot;,&#xd;
	&quot;profileType&quot;:1&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.122.101.74</stringProp>
            <stringProp name="HTTPSampler.port">8500</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/iot/v1/device/video/param</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2092831641">&quot;Result&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="城管V2.0" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">通过部门名称获取部门id，总部为第一级部门，支持三级部门获取部门id</stringProp>
            </elementProp>
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

//String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
//Random random = new Random();
//List alarmTypesList = new ArrayList();
//Map alarmTypelement = new HashMap();	
//GsonBuilder builder = new GsonBuilder().serializeNulls();
//
//for(int j = 0; j &lt; 4; j++){
//int i = random.nextInt(alarmTypeStr.length);
//log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
//alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
//Gson gsontest = builder.create();
//String  albumelementstr = gsontest.toJson(alarmTypelement);
//alarmTypesList.add(albumelementstr);
//}
//log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 获取设备id" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="useraddloop" elementType="Argument">
                <stringProp name="Argument.name">useraddloop</stringProp>
                <stringProp name="Argument.value">200</stringProp>
                <stringProp name="Argument.desc">批量添加用户个数</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rangeid" elementType="Argument">
                <stringProp name="Argument.name">rangeid</stringProp>
                <stringProp name="Argument.value">${__Random(1,10000,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="orgName" elementType="Argument">
                <stringProp name="Argument.name">orgName</stringProp>
                <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取部门id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/organizations/queryTree</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-188" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.231.21.188告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://10.122.94.204:32000/exposed_garbage/3104_050_new_1_612.264&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;39.909869&quot;,&#xd;
    &quot;lon&quot;: &quot;116.398358&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin123&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 2,&#xd;
    &quot;period&quot;: 1800,&#xd;
    &quot;alarmClip&quot;: true,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-3磁盘" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.169.241.3告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin123@10.169.241.3:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;39.909869&quot;,&#xd;
    &quot;lon&quot;: &quot;116.398358&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin123&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 2,&#xd;
    &quot;period&quot;: 1800,&#xd;
    &quot;alarmClip&quot;: false,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-3内存" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.169.241.3-test${__Random(1,10000,)}内存&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;12&quot;,&#xd;
    &quot;deptName&quot;: ${orgName},&#xd;
    &quot;deptId&quot;: &quot;${orgId}&quot;,&#xd;
    &quot;url&quot;: &quot;rtsp://admin:admin123@10.169.241.3:554/0&quot;,&#xd;
    &quot;closed&quot;: false,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;statusSyncInterval&quot;: &quot;5&quot;,&#xd;
    &quot;face&quot;: true,&#xd;
    &quot;faceTTL&quot;: 90,&#xd;
    &quot;full&quot;: false,&#xd;
    &quot;fullTTL&quot;: 7,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;vface&quot;: true,&#xd;
    &quot;vfaceTTL&quot;: 90,&#xd;
    &quot;vfull&quot;: false,&#xd;
    &quot;vfullTTL&quot;: 7,&#xd;
    &quot;vlowQuality&quot;: false,&#xd;
    &quot;lat&quot;: &quot;30.594980&quot;,&#xd;
    &quot;lon&quot;: &quot;114.305736&quot;,&#xd;
    &quot;ptz&quot;: false,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: 554,&#xd;
    &quot;bayonetType&quot;: &quot;12&quot;,&#xd;
    &quot;active&quot;: false,&#xd;
    &quot;recordType&quot;: 1,&#xd;
    &quot;period&quot;: 35,&#xd;
    &quot;alarmClip&quot;: false,&#xd;
    &quot;tagCodes&quot;: [&#xd;
        &quot;1000012&quot;&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="添加及拉取相机" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="useraddloop" elementType="Argument">
                <stringProp name="Argument.name">useraddloop</stringProp>
                <stringProp name="Argument.value">200</stringProp>
                <stringProp name="Argument.desc">批量添加用户个数</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="rangeid" elementType="Argument">
                <stringProp name="Argument.name">rangeid</stringProp>
                <stringProp name="Argument.value">${__Random(1,10000,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="orgName" elementType="Argument">
                <stringProp name="Argument.name">orgName</stringProp>
                <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取${__P(, ${orgName})}部门id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/organizations/queryTree</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);

//		获取总部id
		String zongbuorgId = data.get(&quot;id&quot;).getAsString();
		vars.put(&quot;zongbuorgId&quot;, zongbuorgId);

//		获取指定部门id（部门层级三层以内），也就是相机所属部门id，若为空或者为总部即获取总部id
		String orgId;
		if ((${orgName}== &quot;&quot;) || data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			vars.put(&quot;orgId&quot;, zongbuorgId);
			return 0;
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}		
		vars.put(&quot;orgId&quot;, orgId);
//		log.info(&quot;------------------++++++++++++++++---------------21:&quot;+ vars.get(&quot;orgId&quot;));
//		log.info(&quot;------------------++++++++++++++++---------------2:&quot;+ vars.get(&quot;zongbuorgId&quot;));             
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="无${__P(, ${orgName})} 部门时默认在总部下添加此部门" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(vars.get(&quot;orgId&quot;) == null,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加${__P(, ${orgName})}部门 - 总部的子部门" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;orgName&quot;: ${orgName},&#xd;
    &quot;parentId&quot;: &quot;${zongbuorgId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/galaxy/v1/auth/organizations</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);

		String orgId = data.get(&quot;id&quot;).getAsString();
		vars.putObject(&quot;orgId&quot;, orgId);

           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));           
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机 - 批量导入" enabled="false">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${cameraExcelPath}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${cameraExcelPath}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.ms-excel</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras:import</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机 - 批量导入 - 新增6种类型" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${cameraExcelPath6}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${cameraExcelPath6}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.ms-excel</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras:import</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机 - 批量导入 - 集群400" enabled="false">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${cameraExcelPath400}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${cameraExcelPath400}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.ms-excel</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras:import</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机 - 批量导入 - 集群200" enabled="false">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${cameraExcelPath200}" elementType="HTTPFileArg">
                  <stringProp name="File.path">${cameraExcelPath200}</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                  <stringProp name="File.mimetype">application/vnd.ms-excel</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/rainbow/v1/device/cameras:import</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机 - 查询指定部门的相机数据（1000条以内）" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&quot;${orgId}&quot;],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 1000,&#xd;
    &quot;action&quot;: &quot;pull&quot;,&#xd;
    &quot;searchType&quot;: 0&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:search</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机 - 指定部门的相机跨页全选拉取（1000条以内）" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&#xd;
        &quot;${orgId}&quot;&#xd;
    ],&#xd;
    &quot;searchType&quot;: 0&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:batchSave</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">5000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="修改系统配置 - 告警时间1分钟" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityRecognitionSensitivity&quot;,&#xd;
        &quot;value&quot;: &quot;1&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcitySundrystackAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityRoadsideDryingAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityDirtyRoadAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityExposedGarbageAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityMuckAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityIllegalBuildingAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityOverflowedGarbageAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityWaterIntrusionAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityRoadBrokenAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityWaterGarbageAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityIllegalAdvAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityOutdoorAdvAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityIllegalBannerAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityOpenedMucktruckAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: &quot;0&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityHawkerAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityOutstoreAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityRoadsideAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityCycparkAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityCarparkAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityWatergatherAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityBrokenWellAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: &quot;0&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;code&quot;: &quot;megcityGreenStompingAlarmPushImgTime&quot;,&#xd;
        &quot;value&quot;: 1&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/galaxy/v1/system/configuration/update/batch</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listtaskIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listtaskIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listtaskIddata&quot;, listtaskIddata);
          vars.putObject(&quot;listtaskIddataSize&quot;, listtaskIddata.size());
          if (listtaskIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listtaskIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="解析配置" enabled="false"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="一次控制器 - 拉取相机+获取解析任务id" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

     
if(1==1){
	
	vars.putObject(&quot;alarmTypes&quot;,  {&quot;alarmType&quot;: &quot;A2-04-01&quot;},
        {&quot;alarmType&quot;: &quot;A2-04-05&quot;},
        {&quot;alarmType&quot;: &quot;A2-01-36&quot;},
        {&quot;alarmType&quot;: &quot;A2-04-06&quot;},);
	
	log.info(&quot;alarmTypes:&quot; + vars.getObject(&quot;alarmTypes&quot;));

	
	}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取部门id" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/auth/v5/organizations/queryTree</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		String orgId;
		
		if(data.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
		{
			orgId = data.get(&quot;id&quot;).getAsString();
		}else {
			JsonArray subOrgsArray =  data.getAsJsonArray(&quot;subOrgs&quot;);
			Iterator iter = subOrgsArray.iterator();
			while(iter.hasNext()) {
				JsonObject subJson = (JsonObject)iter.next(); 
				if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
				{
					orgId = subJson.get(&quot;id&quot;).getAsString();
				}else{
					JsonArray subOrgsArray =  subJson.getAsJsonArray(&quot;subOrgs&quot;);
					Iterator iter = subOrgsArray.iterator();
					while(iter.hasNext()) {
						JsonObject subJson = (JsonObject)iter.next(); 
						if(subJson.get(&quot;orgName&quot;).getAsString().equals(${orgName}))
						      orgId = subJson.get(&quot;id&quot;).getAsString();
				     }
          		}
               }
		}
		 vars.putObject(&quot;orgId&quot;, orgId);
//           log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;orgId&quot;));      
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机- 跨页全选方式" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&#xd;
        &quot;${orgId}&quot;&#xd;
    ],&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:batchSave</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="拉取相机 - 勾选方式" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="相机管理-相机列表" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;deptIds&quot;: [&#xd;
        &quot;${orgId}&quot;&#xd;
    ],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 1000,&#xd;
    &quot;action&quot;: &quot;pull&quot;,&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:search</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcameraIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcameraIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listcameraIddata&quot;, listcameraIddata);
          vars.putObject(&quot;listcameraIddataSize&quot;, listcameraIddata.size());
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcameraIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcameraIddata&quot;));
          
     }
}</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="拉取相机" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;ids&quot;: ${listcameraIddata},&#xd;
    &quot;searchType&quot;: 1&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:batchSave</stringProp>
                <stringProp name="HTTPSampler.method">PATCH</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析配置-获取任务id" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: ${pageSize},&#xd;
    &quot;condition&quot;: {&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/task/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listtaskIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listtaskIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listtaskIddata&quot;, listtaskIddata);
          vars.putObject(&quot;listtaskIddataSize&quot;, listtaskIddata.size());
          if (listtaskIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listtaskIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析配置-获取任务id -指定" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 1,&#xd;
    &quot;condition&quot;: {&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/task/queryByPage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listtaskIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listtaskIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listtaskIddata&quot;, listtaskIddata);
          vars.putObject(&quot;listtaskIddataSize&quot;, listtaskIddata.size());
          if (listtaskIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listtaskIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 解析任务配置" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${listloop}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end">${listloop}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">countid</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析任务配置-${countid}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${taskId},&#xd;
  &quot;rule&quot;: 1,&#xd;
  &quot;startDate&quot;: &quot;${__timeShift(,,,,)}&quot;,&#xd;
  &quot;endDate&quot;: &quot;${__timeShift(,,P30D,,)}&quot;,&#xd;
  &quot;loopPeriods&quot;: [&#xd;
    {&#xd;
      &quot;endTime&quot;: &quot;08:00&quot;,&#xd;
      &quot;startTime&quot;: &quot;20:00&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;weekly&quot;: [&#xd;
    1,2,3,4,5,6,7&#xd;
  ],&#xd;
  &quot;rois&quot;: [&#xd;
    {&#xd;
      &quot;alarmTypes&quot;: [&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-05&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-36&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-10&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-09&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-03-11&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-07&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-12&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-10&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-11&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-06-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-03&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;B2-01-98&quot;&#xd;
        },&#xd;
        &#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-05-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;B2-04-100&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-24&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-13&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-25&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-07&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;roi&quot;: [&#xd;
        {&#xd;
          &quot;x&quot;: 0.022,&#xd;
          &quot;y&quot;: 0.009&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.011,&#xd;
          &quot;y&quot;: 0.983&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.994,&#xd;
          &quot;y&quot;: 0.992&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.991,&#xd;
          &quot;y&quot;: 0.009&#xd;
        }&#xd;
      ],&#xd;
      &quot;taskId&quot;: ${taskId},&#xd;
      &quot;storeId&quot;: null&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/task/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//log.info(&quot;countid:&quot; + vars.getObject(&quot;countid&quot;));
vars.putObject(&quot;taskId&quot;, vars.getObject(&quot;listtaskIddata&quot;).get(${countid}));
//log.info(&quot;taskId:&quot; + vars.getObject(&quot;taskId&quot;));
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析任务配置-${countid} - 部分识别类型" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: ${taskId},&#xd;
  &quot;rule&quot;: 1,&#xd;
  &quot;startDate&quot;: &quot;${__timeShift(,,,,)}&quot;,&#xd;
  &quot;endDate&quot;: &quot;${__timeShift(,,P30D,,)}&quot;,&#xd;
  &quot;loopPeriods&quot;: [&#xd;
    {&#xd;
      &quot;endTime&quot;: &quot;08:00&quot;,&#xd;
      &quot;startTime&quot;: &quot;20:00&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;weekly&quot;: [&#xd;
    1,2,3,4,5,6,7&#xd;
  ],&#xd;
  &quot;rois&quot;: [&#xd;
    {&#xd;
      &quot;alarmTypes&quot;: ${alarmTypesList4},&#xd;
      &quot;roi&quot;: [&#xd;
        {&#xd;
          &quot;x&quot;: 0.022,&#xd;
          &quot;y&quot;: 0.009&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.011,&#xd;
          &quot;y&quot;: 0.983&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.994,&#xd;
          &quot;y&quot;: 0.992&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.991,&#xd;
          &quot;y&quot;: 0.009&#xd;
        }&#xd;
      ],&#xd;
      &quot;taskId&quot;: ${taskId},&#xd;
      &quot;storeId&quot;: null&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/task/update</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

//获取taskid
vars.putObject(&quot;taskId&quot;, vars.getObject(&quot;listtaskIddata&quot;).get(${countid}));

//设置识别类型，随机取4种类型
String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
Random random = new Random();
List alarmTypesList = new ArrayList();
Map alarmTypelement = new HashMap();
GsonBuilder builder = new GsonBuilder().serializeNulls();

for(int j = 0; j &lt; 2; j++){
int i = random.nextInt(alarmTypeStr.length);
log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
Gson gsontest = builder.create();
String  albumelementstr = gsontest.toJson(alarmTypelement);
alarmTypesList.add(albumelementstr);
}
vars.putObject(&quot;alarmTypesList4&quot;, alarmTypesList);
log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="现场处置" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName1}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd1}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取待处置" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        2&#xd;
    ],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 2,&#xd;
    &quot;deliverStartTime&quot;: 1618388964830,&#xd;
    &quot;deliverEndTime&quot;: ${__time(,)}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/events/queryByWaterFall</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List caseIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			caseIddata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;caseIddata&quot;, caseIddata);
          vars.putObject(&quot;caseIddataSize&quot;, caseIddata.size());
          if (caseIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop1&quot;, caseIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop1&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;caseIddatasize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop1&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;caseIddata&quot;));
          
     }
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${listloop1}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end">${listloop1}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">countid</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传核查图" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Users\yangmeng04\Desktop\96BAC4CA-8CCF-4649-9AB9-3A82668C8D03.png" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Users\yangmeng04\Desktop\96BAC4CA-8CCF-4649-9AB9-3A82668C8D03.png</stringProp>
                    <stringProp name="File.paramname">firstCheckImage</stringProp>
                    <stringProp name="File.mimetype">image/png</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="caseNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${caseNumber}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">caseNumber</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/events/upload-check-image</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//log.info(&quot;countid:&quot; + vars.getObject(&quot;countid&quot;));
vars.putObject(&quot;caseNumber&quot;, vars.getObject(&quot;caseIddata&quot;).get(${countid}));
//log.info(&quot;taskId:&quot; + vars.getObject(&quot;taskId&quot;));
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="店铺上传" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName1}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd1}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 上传" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上传店铺信息" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="D:\work\test\测试数据\万象数据\Panorama.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\work\test\测试数据\万象数据\Panorama.jpg</stringProp>
                    <stringProp name="File.paramname">panoramaImage</stringProp>
                    <stringProp name="File.mimetype">image/png</stringProp>
                  </elementProp>
                  <elementProp name="D:\work\test\测试数据\万象数据\牌匾.png" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\work\test\测试数据\万象数据\牌匾.png</stringProp>
                    <stringProp name="File.paramname">logoImage</stringProp>
                    <stringProp name="File.mimetype">image/jpg</stringProp>
                  </elementProp>
                  <elementProp name="D:\work\test\测试数据\万象数据\1.jpg" elementType="HTTPFileArg">
                    <stringProp name="File.path">D:\work\test\测试数据\万象数据\1.jpg</stringProp>
                    <stringProp name="File.paramname">certificateImage</stringProp>
                    <stringProp name="File.mimetype">image/png</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="data" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;name&quot;: &quot;蜜雪冰城号${__time(,)}&quot;,&quot;address&quot;: &quot;龙山南街1号${__time(,)}&quot;,&quot;certificateNumber&quot;: &quot;2357${__time(,)}&quot;,&quot;artificialPersonInformation&quot;: {&quot;name&quot;: &quot;执法案件检索${__time(,)}&quot;,&quot;phoneNumber&quot;: &quot;13894719741&quot;},&quot;location&quot;: {&quot;lon&quot;: 114.126${__Random(1,9,)}${__Random(1,9,)},&quot;lat&quot;: 30.426${__Random(1,9,)}${__Random(1,9,)}}}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">data</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores:add</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="循环控制器 - 入库" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取未入库店铺信息" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: 0,&#xd;
    &quot;storeName&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;certificateNumber&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;address&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;startTime&quot;: 1618910601400,&#xd;
    &quot;endTime&quot;: ${__time(,)},&#xd;
    &quot;pageSize&quot;: 50&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores/card:query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List liststoreIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			liststoreIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;liststoreIddata&quot;, liststoreIddata);
          vars.putObject(&quot;liststoreIddataSize&quot;, liststoreIddata.size());
          if (liststoreIddata.size()&gt; 0){
          	vars.putObject(&quot;liststoreloop&quot;, liststoreIddata.size());
          } 
          else {
          	vars.putObject(&quot;liststoreloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 入库" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${liststoreloop}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">0</stringProp>
                <stringProp name="CounterConfig.end">${liststoreloop}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">countid</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="店铺入库-${countid}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;storeId&quot;: &quot;${storeId}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores:accept</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">vars.putObject(&quot;storeId&quot;, vars.getObject(&quot;liststoreIddata&quot;).get(${countid}));


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="循环控制器 - 作废" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取未入库店铺信息" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: 0,&#xd;
    &quot;storeName&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;certificateNumber&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;address&quot;: &quot;蜜雪冰城号&quot;,&#xd;
    &quot;startTime&quot;: 1618910601400,&#xd;
    &quot;endTime&quot;: ${__time(,)},&#xd;
    &quot;pageSize&quot;: 50&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores/card:query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List liststoreIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			liststoreIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;liststoreIddata&quot;, liststoreIddata);
          vars.putObject(&quot;liststoreIddataSize&quot;, liststoreIddata.size());
          if (liststoreIddata.size()&gt; 0){
          	vars.putObject(&quot;liststoreloop&quot;, liststoreIddata.size());
          } 
          else {
          	vars.putObject(&quot;liststoreloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器 - 作废" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${liststoreloop}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">0</stringProp>
                <stringProp name="CounterConfig.end">${liststoreloop}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">countid</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="店铺作废-${countid}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
    &quot;storeId&quot;: &quot;${storeId}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores:reject</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">vars.putObject(&quot;storeId&quot;, vars.getObject(&quot;liststoreIddata&quot;).get(${countid}));


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="67791721">&quot;code&quot;:0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询事件-已结案" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        -1,&#xd;
        4&#xd;
    ],&#xd;
    &quot;classifyType&quot;: 1,&#xd;
    &quot;createStartTime&quot;: 1621526400000,&#xd;
    &quot;createEndTime&quot;: 1621570347230&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/events/query/groupbyCount</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">2000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listtaskIddata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listtaskIddata.add(subJson.get(&quot;id&quot;).getAsString());
          }
          vars.putObject(&quot;listtaskIddata&quot;, listtaskIddata);
          vars.putObject(&quot;listtaskIddataSize&quot;, listtaskIddata.size());
          if (listtaskIddata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listtaskIddata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listtaskIddata&quot;));
          
     }
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="添加相机-20" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;10.231.107.20告警test${__Random(1,10000,)}&quot;,&#xd;
    &quot;type&quot;: &quot;1&quot;,&#xd;
    &quot;manufacturer&quot;: &quot;11&quot;,&#xd;
    &quot;monitoringType&quot;: &quot;4&quot;,&#xd;
    &quot;ipAddr&quot;: &quot;10.${__Random(1,255,)}.10.12&quot;,&#xd;
    &quot;active&quot;: 0,&#xd;
    &quot;username&quot;: &quot;admin&quot;,&#xd;
    &quot;password&quot;: &quot;admin&quot;,&#xd;
    &quot;cmdPort&quot;: &quot;3000&quot;,&#xd;
    &quot;videoPort&quot;: &quot;554&quot;,&#xd;
    &quot;ptz&quot;: 1,&#xd;
    &quot;managementId&quot;: &quot;6e9232ef-7b84-11e8-86b1-6c92bf4e6960&quot;,&#xd;
    &quot;storageScheme&quot;: 1,&#xd;
    &quot;statusSyncInterval&quot;: 10,&#xd;
    &quot;lowQuality&quot;: false,&#xd;
    &quot;fullRectModel&quot;: &quot;1&quot;,&#xd;
    &quot;shareModel&quot;: &quot;0&quot;,&#xd;
    &quot;alarmShortVideo&quot;: false,&#xd;
    &quot;recordType&quot;: 1,&#xd;
    &quot;period&quot;: 35,&#xd;
    &quot;pulled&quot;: false,&#xd;
    &quot;lat&quot;: &quot;30.906541&quot;,&#xd;
    &quot;lon&quot;: &quot;114.399303&quot;,&#xd;
    &quot;channelNo&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/galaxy/v1/device/cameras:create</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="解析任务配置- 指定任务id" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 99,&#xd;
  &quot;rule&quot;: 1,&#xd;
  &quot;startDate&quot;: &quot;${__timeShift(,,,,)}&quot;,&#xd;
  &quot;endDate&quot;: &quot;${__timeShift(,,P30D,,)}&quot;,&#xd;
  &quot;loopPeriods&quot;: [&#xd;
    {&#xd;
      &quot;endTime&quot;: &quot;08:00&quot;,&#xd;
      &quot;startTime&quot;: &quot;20:00&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;weekly&quot;: [&#xd;
    1,2,3,4,5,6,7&#xd;
  ],&#xd;
  &quot;rois&quot;: [&#xd;
    {&#xd;
      &quot;alarmTypes&quot;: [&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-05&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-36&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-10&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-04-09&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-03-11&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-07&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-12&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-10&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-11&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-06-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-03&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-01&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;B2-01-98&quot;&#xd;
        },&#xd;
        &#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-05-06&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;B2-04-100&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-24&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-13&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-01-25&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;alarmType&quot;: &quot;A2-02-07&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;roi&quot;: [&#xd;
        {&#xd;
          &quot;x&quot;: 0.022,&#xd;
          &quot;y&quot;: 0.009&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.011,&#xd;
          &quot;y&quot;: 0.983&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.994,&#xd;
          &quot;y&quot;: 0.992&#xd;
        },&#xd;
        {&#xd;
          &quot;x&quot;: 0.991,&#xd;
          &quot;y&quot;: 0.009&#xd;
        }&#xd;
      ],&#xd;
      &quot;taskId&quot;: 99,&#xd;
      &quot;storeId&quot;: null&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/task/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="数据清理 - 视频图片" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/scheduler/events/video-image-clean</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="数据清理 - 店铺" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/basisdata/stores/scheduled-clean</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="城管2.0性能测试 - 1000路录像解析" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">通过部门名称获取部门id，总部为第一级部门，支持三级部门获取部门id</stringProp>
            </elementProp>
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
          <intProp name="groupSize">4</intProp>
          <longProp name="timeoutInMs">0</longProp>
        </SyncTimer>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">${listloop}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">countid</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

//String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
//Random random = new Random();
//List alarmTypesList = new ArrayList();
//Map alarmTypelement = new HashMap();	
//GsonBuilder builder = new GsonBuilder().serializeNulls();
//
//for(int j = 0; j &lt; 4; j++){
//int i = random.nextInt(alarmTypeStr.length);
//log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
//alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
//Gson gsontest = builder.create();
//String  albumelementstr = gsontest.toJson(alarmTypelement);
//alarmTypesList.add(albumelementstr);
//}
//log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取执法案件id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pageSize&quot;:50,&#xd;
	&quot;startTime&quot;:1622633415000,&#xd;
	&quot;endTime&quot;:1622634015000&#xd;
	}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/queryByCard</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcaseNumberdata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcaseNumberdata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;listcaseNumberdata&quot;, listcaseNumberdata);
          vars.putObject(&quot;listcaseNumberdataSize&quot;, listcaseNumberdata.size());
          if (listcaseNumberdata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listcaseNumberdata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdataSize&quot;));
          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdata&quot;));
     }
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="结构化申请分析" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/analysis/${caseNumber}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">
vars.putObject(&quot;caseNumber&quot;, vars.getObject(&quot;listcaseNumberdata&quot;).get(${__counter(FALSE,)}));
//log.info(&quot;------------------++++++++++++++++---------------__threadNum1:&quot;+ ${__threadNum});
//Integer countnum = (${__threadNum}-1)*200+${countid};
//log.info(&quot;------------------++++++++++++++++---------------__threadNum2:&quot;+ countnum);
//log.info(&quot;------------------++++++++++++++++---------------__iterationNum:&quot;+ ${__iterationNum});

//log.info(&quot;------------------++++++++++++++++---------------countid:&quot;+${__counter(FALSE,)});
//log.info(&quot;------------------++++++++++++++++---------------caseNumber:&quot;+ vars.get(&quot;caseNumber&quot;));
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\work\jmeter\result.txt</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="城管V2.0性能测试 - 查看结构化解析并发情况" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">通过部门名称获取部门id，总部为第一级部门，支持三级部门获取部门id</stringProp>
            </elementProp>
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查看结构化申请分析状态" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/v5/offlineVideos?pageOffset=0&amp;pageSize=36</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	
	JsonArray recordsArray =  jsonObject.getAsJsonArray(&quot;videos&quot;);
	Iterator iter = recordsArray.iterator();
	List listvideoIddata = new ArrayList();
	Integer FinishCount = 0;
	Integer ProcessingCount = 0;
	Integer PausedCount = 0;
	Integer PrepareCount = 0;
	
	while(iter.hasNext()) 
		{
			JsonObject subJson = (JsonObject)iter.next();
			listvideoIddata.add(subJson.get(&quot;name&quot;).getAsString());
//			log.info(&quot;------------------++++++++++++++++---------------&quot; + subJson.get(&quot;name&quot;) +&quot;:&quot;+subJson.get(&quot;status&quot;));

			if(subJson.get(&quot;status&quot;).getAsString().equals(&quot;VIDEO_FINISHED&quot;)){
				FinishCount++;
				}
			if(subJson.get(&quot;status&quot;).getAsString().equals(&quot;VIDEO_PROCESSING&quot;)){
				ProcessingCount++;
				}
			if(subJson.get(&quot;status&quot;).getAsString().equals(&quot;VIDEO_PREPARING&quot;)){
				PrepareCount++;
				}			
			if(subJson.get(&quot;status&quot;).getAsString().equals(&quot;VIDEO_PAUSED&quot;)){
				PausedCount++;
				}	
          }

          log.info(&quot;------------------++++++++++++++++---------------VIDEO_FINISHED:&quot; + FinishCount + &quot; VIDEO_PROCESSING:&quot; + ProcessingCount +&quot; PrepareCount:&quot; + PrepareCount);
//			log.info(&quot;------------------++++++++++++++++---------------VIDEO_FINISHED:&quot; + FinishCount);
//			log.info(&quot;------------------++++++++++++++++---------------VIDEO_PROCESSING:&quot; + ProcessingCount);			
//			log.info(&quot;------------------++++++++++++++++---------------PrepareCount:&quot; + PrepareCount);
//			log.info(&quot;------------------++++++++++++++++---------------VIDEO_PAUSED:&quot; + PausedCount);  
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="城管2.0性能测试 - 千万检索" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name"></stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="orgName" elementType="Argument">
              <stringProp name="Argument.name">orgName</stringProp>
              <stringProp name="Argument.value">&quot;总部&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">通过部门名称获取部门id，总部为第一级部门，支持三级部门获取部门id</stringProp>
            </elementProp>
            <elementProp name="pageSize" elementType="Argument">
              <stringProp name="Argument.name">pageSize</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
          <intProp name="groupSize">5</intProp>
          <longProp name="timeoutInMs">0</longProp>
        </SyncTimer>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end">${listloop}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">countid</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

//String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
//Random random = new Random();
//List alarmTypesList = new ArrayList();
//Map alarmTypelement = new HashMap();	
//GsonBuilder builder = new GsonBuilder().serializeNulls();
//
//for(int j = 0; j &lt; 4; j++){
//int i = random.nextInt(alarmTypeStr.length);
//log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
//alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
//Gson gsontest = builder.create();
//String  albumelementstr = gsontest.toJson(alarmTypelement);
//alarmTypesList.add(albumelementstr);
//}
//log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待转发 - 检索列表" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        1&#xd;
    ],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 50,&#xd;
    &quot;sortType&quot;: [&#xd;
        20,&#xd;
        10&#xd;
    ],&#xd;
    &quot;createStartTime&quot;: 1620023904819,&#xd;
    &quot;createEndTime&quot;: 1622615904819&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/events/queryByWaterFall</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待转发 - 检索聚合" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        1&#xd;
    ],&#xd;
    &quot;classifyType&quot;: 1,&#xd;
    &quot;createStartTime&quot;: 1620023904819,&#xd;
    &quot;createEndTime&quot;: 1622615904819&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/megcity/v1/events/query/groupbyCount</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67791721">&quot;code&quot;:0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="态势感知资源库-数据统计-检索-10用户-随机条件" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Name</stringProp>
              <stringProp name="Header.value">${Name}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Pwd</stringProp>
              <stringProp name="Header.value">${Pwd}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
          <intProp name="groupSize">2</intProp>
          <longProp name="timeoutInMs">0</longProp>
        </SyncTimer>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="登录 - 数据初始化" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${Name}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${Pwd}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

//String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
//Random random = new Random();
//List alarmTypesList = new ArrayList();
//Map alarmTypelement = new HashMap();	
//GsonBuilder builder = new GsonBuilder().serializeNulls();
//
//for(int j = 0; j &lt; 4; j++){
//int i = random.nextInt(alarmTypeStr.length);
//log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
//alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
//Gson gsontest = builder.create();
//String  albumelementstr = gsontest.toJson(alarmTypelement);
//alarmTypesList.add(albumelementstr);
//}
//log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取案件id" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        1&#xd;
    ],&#xd;
    &quot;pageNo&quot;:${__threadNum},&#xd;
    &quot;pageSize&quot;: 10000,&#xd;
    &quot;sortType&quot;: [&#xd;
        20,&#xd;
        10&#xd;
    ],&#xd;
    &quot;createStartTime&quot;: ${__timeShift(,,P-${starttime}D,,)},&#xd;
    &quot;createEndTime&quot;: ${__timeShift(,,P-${endtime}D,,)},&#xd;
    &quot;types&quot;:[&quot;A2-01-25&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/events/queryByWaterFall</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Integer starttime = ${__threadNum} * 2 + 10;
Integer endtime = starttime - 2;
vars.putObject(&quot;starttime&quot;, starttime);
vars.putObject(&quot;endtime&quot;, endtime);
//log.info(&quot;------------------++++++++++++++++---------------starttime:&quot;+ vars.getObject(&quot;starttime&quot;));
//log.info(&quot;------------------++++++++++++++++---------------endtime:&quot;+ vars.getObject(&quot;endtime&quot;));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcaseNumberdata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcaseNumberdata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;listcaseNumberdata&quot;, listcaseNumberdata);
          vars.putObject(&quot;listcaseNumberdataSize&quot;, listcaseNumberdata.size());
          if (listcaseNumberdata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listcaseNumberdata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ ${__threadNum});
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdata&quot;));
     }
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获得用户登录token信息" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;type&quot;:&quot;account&quot;,&#xd;
	&quot;userName&quot;:&quot;${userName}&quot;,&#xd;
	&quot;userPwd&quot;:&quot;${userPwd}&quot;,&#xd;
	&quot;clientAppId&quot;:&quot;${clientAppId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${port80}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="鉴权信息" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${Authorization}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON断言" enabled="true">
              <stringProp name="JSON_PATH">$.data.user.userName</stringProp>
              <stringProp name="EXPECTED_VALUE">${userName}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="态势统计资源库-检索" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${listloop}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">countid</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">types</stringProp>
                <stringProp name="Header.value">${types}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">types_rom</stringProp>
                <stringProp name="Header.value">${__CSVRead(D:\文档\项目文档\3.北京大数据平台AI能力建设项目\性能测试\testdata\随机条件-函数助手.csv,${__Random(0,8,)})}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待转发 - 检索列表 - 案件编号检索" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        1&#xd;
    ],&#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 50,&#xd;
    &quot;sortType&quot;: [&#xd;
        20,&#xd;
        10&#xd;
    ],&#xd;
    &quot;createStartTime&quot;: 1619798400000,&#xd;
    &quot;createEndTime&quot;: 1622476799000,&#xd;
    &quot;caseNumber&quot;:&quot;${caseNumber}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/queryByCard</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
vars.putObject(&quot;caseNumber&quot;, vars.getObject(&quot;listcaseNumberdata&quot;).get(${countid}));

log.info(&quot;------------------++++++++++++++++---------------countid:&quot;+${countid} + &quot;  caseNumber:&quot;+ vars.get(&quot;caseNumber&quot;) + &quot;  threadNum:&quot;+ ${__threadNum});


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="待转发 - 检索聚合- 案件编号检索" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;state&quot;: [&#xd;
        1&#xd;
    ],&#xd;
    &quot;classifyType&quot;: 1,&#xd;
    &quot;createStartTime&quot;: 1619798400000,&#xd;
    &quot;createEndTime&quot;: 1622476799000,&#xd;
    &quot;caseNumber&quot;:&quot;${caseNumber}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/countByType</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="态势统计资源库-检索" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;startTime&quot;: 1627488000000,&#xd;
  &quot;endTime&quot;: 1628092799999,&#xd;
  &quot;types&quot;: [&#xd;
    &quot;${__CSVRead(D:\文档\项目文档\3.北京大数据平台AI能力建设项目\性能测试\testdata\随机条件-函数助手.csv,${__Random(0,8,)})}&quot;&#xd;
  ],&#xd;
  &quot;states&quot;: &quot;-1,3&quot;,&#xd;
  &quot;pageNo&quot;: 1,&#xd;
  &quot;pageSize&quot;: 20&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/events/queryByPage</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="鉴权信息" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-OA-Token</stringProp>
                  <stringProp name="Header.value">${Authorization}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="723335839">&quot;code&quot;:0,&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="城管2.0性能测试 - 千万检索- 案件编号检索 - 一天" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json;text/plain; */*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
          <intProp name="groupSize">2</intProp>
          <longProp name="timeoutInMs">0</longProp>
        </SyncTimer>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="登录 - 数据初始化" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登录" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;account&quot;,&#xd;
    &quot;userName&quot;: &quot;${userName}&quot;,&#xd;
    &quot;userPwd&quot;: &quot;${userPwd}&quot;,&#xd;
    &quot;clientAppId&quot;: &quot;megcity-web&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/auth/v5/users/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);


if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {

		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
//		log.info(&quot;*********************************Response data:&quot; + data);
		String token = data.get(&quot;token&quot;).getAsString();
//		log.info(&quot;*********************************Response token:&quot; + token);
		vars.put(&quot;token&quot;,token);
//		log.info(&quot;11111111111111111111111111111111111111111&quot;+ vars.get(&quot;token&quot;));
       
     }
     }

//String[] alarmTypeStr = new String[]{&quot;A2-04-01&quot;,&quot;A2-04-05&quot;,&quot;A2-01-36&quot;,&quot;A2-04-06&quot;,&quot;A2-04-10&quot;,&quot;A2-04-09&quot;,&quot;A2-03-11&quot;,&quot;A2-01-07&quot;,&quot;A2-02-01&quot;,&quot;A2-01-12&quot;,&quot;A2-01-10&quot;,&quot;A2-01-11&quot;,&quot;A2-06-06&quot;,&quot;A2-02-03&quot;,&quot;A2-01-01&quot;,&quot;B2-01-98&quot;,&quot;A2-05-06&quot;,&quot;B2-04-100&quot;,&quot;A2-01-24&quot;,&quot;A2-01-13&quot;,&quot;A2-01-25&quot;,&quot;A2-02-07&quot;};
//Random random = new Random();
//List alarmTypesList = new ArrayList();
//Map alarmTypelement = new HashMap();	
//GsonBuilder builder = new GsonBuilder().serializeNulls();
//
//for(int j = 0; j &lt; 4; j++){
//int i = random.nextInt(alarmTypeStr.length);
//log.info(&quot;11111111111111111111111111111111111111111 alarmTypes:&quot; + alarmTypeStr[i]);
//alarmTypelement.put(&quot;alarmType&quot;,alarmTypeStr[i]);
//Gson gsontest = builder.create();
//String  albumelementstr = gsontest.toJson(alarmTypelement);
//alarmTypesList.add(albumelementstr);
//}
//log.info(&quot;2222222222222222222222222222222222222222 alarmTypesList:&quot; + alarmTypesList);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取案件id" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &#xd;
    &quot;pageNo&quot;:1,&#xd;
    &quot;pageSize&quot;: 10000,&#xd;
    &#xd;
    &quot;createStartTime&quot;: 1622476800000,&#xd;
    &quot;createEndTime&quot;: 1622563199000&#xd;
    &#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/queryByCard</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Integer starttime = ${__threadNum} * 2 + 10;
Integer endtime = starttime - 2;
vars.putObject(&quot;starttime&quot;, starttime);
vars.putObject(&quot;endtime&quot;, endtime);
//log.info(&quot;------------------++++++++++++++++---------------starttime:&quot;+ vars.getObject(&quot;starttime&quot;));
//log.info(&quot;------------------++++++++++++++++---------------endtime:&quot;+ vars.getObject(&quot;endtime&quot;));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcaseNumberdata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcaseNumberdata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;listcaseNumberdata&quot;, listcaseNumberdata);
          vars.putObject(&quot;listcaseNumberdataSize&quot;, listcaseNumberdata.size());
          if (listcaseNumberdata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listcaseNumberdata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ ${__threadNum});
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdata&quot;));
     }
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取案件id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &#xd;
    &quot;pageNo&quot;:${__threadNum},&#xd;
    &quot;pageSize&quot;: 10000,&#xd;
 &#xd;
    &quot;createStartTime&quot;: ${__timeShift(,,P-${starttime}D,,)},&#xd;
    &quot;createEndTime&quot;: ${__timeShift(,,P-${endtime}D,,)},&#xd;
    &quot;types&quot;:[&quot;A2-01-25&quot;]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/queryByCard</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Integer starttime = ${__threadNum} * 2 + 10;
Integer endtime = starttime - 2;
vars.putObject(&quot;starttime&quot;, starttime);
vars.putObject(&quot;endtime&quot;, endtime);
//log.info(&quot;------------------++++++++++++++++---------------starttime:&quot;+ vars.getObject(&quot;starttime&quot;));
//log.info(&quot;------------------++++++++++++++++---------------endtime:&quot;+ vars.getObject(&quot;endtime&quot;));

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

String responseCode = prev.getResponseCode();
//log.info(&quot;----------------------------------HTTP response code:&quot; + responseCode);

if(responseCode.equals(&quot;200&quot;)) {
	String responseVP = prev.getResponseDataAsString();
	GsonBuilder builder = new GsonBuilder().serializeNulls();
	Gson gson = builder.create();
	JsonObject jsonObject = gson.fromJson(responseVP, JsonObject.class);
	Integer reslutCode = jsonObject.get(&quot;code&quot;).getAsInt();
//	log.info(&quot;*********************************Response code:&quot; + reslutCode);


	if(reslutCode == 0) {
		JsonObject data =  gson.fromJson(jsonObject.get(&quot;data&quot;), JsonObject.class);
		JsonArray resultArray =  data.getAsJsonArray(&quot;records&quot;);

          Iterator iter = resultArray.iterator();
          List listcaseNumberdata = new ArrayList();

          while(iter.hasNext()) {
          	JsonObject subJson = (JsonObject)iter.next(); 
			listcaseNumberdata.add(subJson.get(&quot;caseNumber&quot;).getAsString());
          }
          vars.putObject(&quot;listcaseNumberdata&quot;, listcaseNumberdata);
          vars.putObject(&quot;listcaseNumberdataSize&quot;, listcaseNumberdata.size());
          if (listcaseNumberdata.size()&gt; 0){
          	vars.putObject(&quot;listloop&quot;, listcaseNumberdata.size());
          } 
          else {
          	vars.putObject(&quot;listloop&quot;, 0);
          }
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdataSize&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listloop&quot;));
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ ${__threadNum});
//          log.info(&quot;------------------++++++++++++++++---------------:&quot;+ vars.get(&quot;listcaseNumberdata&quot;));
     }
}

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2000</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">${listloop}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">countid</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执法研判 - 检索列表 - 案件编号检索" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &#xd;
    &quot;pageNo&quot;: 1,&#xd;
    &quot;pageSize&quot;: 50,&#xd;
    &quot;sortType&quot;: [&#xd;
        20,&#xd;
        10&#xd;
    ],&#xd;
    &quot;createStartTime&quot;: 1622476800000,&#xd;
    &quot;createEndTime&quot;: 1622563199000,&#xd;
    &quot;caseNumber&quot;:&quot;${caseNumber}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/queryByCard</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
vars.putObject(&quot;caseNumber&quot;, vars.getObject(&quot;listcaseNumberdata&quot;).get(${countid}));

log.info(&quot;------------------++++++++++++++++---------------countid:&quot;+${countid} + &quot;  caseNumber:&quot;+ vars.get(&quot;caseNumber&quot;) + &quot;  threadNum:&quot;+ ${__threadNum});


</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="执法研判 - 检索聚合- 案件编号检索" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &#xd;
    &quot;classifyType&quot;: 1,&#xd;
    &quot;createStartTime&quot;: 1622476800000,&#xd;
    &quot;createEndTime&quot;: 1622563199000,&#xd;
    &quot;caseNumber&quot;:&quot;${caseNumber}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ipaddr}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/megcity/v1/clue/countByType</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="67791721">&quot;code&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
